name: Build and Deploy

on:
  push:
    branches:
      - dev
      - staging
      - prod

env:
  IMAGE_NAME: phwebcloud/python_app
  DOCKER_REGISTRY: ghcr.io  # GitHub Container Registry

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout o código da branch
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configuração do Node.js (se necessário para dependências)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Instalar dependências do sistema
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libpq-dev build-essential
      
      - name: Upgrade pip, setuptools, and wheel
        run: pip install --upgrade pip setuptools wheel


      # Instala dependências (exemplo para Python e Node.js)
      - name: Install Dependencies
        working-directory: app
        run: |
          pip install -r requirements.txt
          npm install

      # Realiza os testes
      - name: Run Tests
        working-directory: app
        run: pytest tests/

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Checkout o código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Login no GitHub Packages
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $DOCKER_REGISTRY -u ${{ github.actor }} --password-stdin

      # Construção da imagem Docker com tag
      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }} ./app
          docker tag $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }} $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:latest

      # Push da imagem Docker para o GitHub Packages
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:${{ github.sha }}
          docker push $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      # Deploy baseado na branch
      - name: Deploy to Environment
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "Deploying to dev"
            docker run -d \
              --name myapp-dev \
              --env-file app/.env \
              -p 8080:8080 \
              $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:latest
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "Deploying to staging"
            docker run -d \
              --name myapp-staging \
              --env-file app/.env \
              -p 8081:8080 \
              $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:latest
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            echo "Deploying to prod using Blue-Green strategy"
            
            # Identificar containers ativos (green/blue)
            ACTIVE_CONTAINER=$(docker ps -q --filter "name=myapp-green")
            if [[ -z "$ACTIVE_CONTAINER" ]]; then
              NEW_CONTAINER_COLOR="green"
              OLD_CONTAINER_COLOR="blue"
            else
              NEW_CONTAINER_COLOR="blue"
              OLD_CONTAINER_COLOR="green"
            fi

            # Subir novo container
            docker run -d \
              --name myapp-$NEW_CONTAINER_COLOR \
              --env-file app/.env \
              -p 8080:8080 \
              $DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME:latest

            # Testar o novo container
            sleep 10  # Espera o serviço estar pronto
            RESPONSE=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8080/healthcheck)

            if [[ "$RESPONSE" == "200" ]]; then
              echo "New container ($NEW_CONTAINER_COLOR) is healthy. Switching traffic."
              docker stop $OLD_CONTAINER_COLOR && docker rm $OLD_CONTAINER_COLOR
            else
              echo "New container ($NEW_CONTAINER_COLOR) failed. Rolling back."
              docker stop $NEW_CONTAINER_COLOR && docker rm $NEW_CONTAINER_COLOR
              exit 1
            fi
          fi
