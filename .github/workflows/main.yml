name: Python App CI/CD

on:
  push:
    branches:
      - main
      - staging
      - dev
    tags:
      - v*  # Definir trigger para tags que começam com "v"
  pull_request:
    branches:
      - main  # Somente PR para a branch main

jobs:
  # Job de Build e Test
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build image using Docker Compose
        run: |
          docker-compose -f docker-compose.yml build

      - name: Run tests
        run: |
          docker-compose -f docker-compose.yml up -d
          docker ps  # Verifica se o container está em execução
          sleep 30  # Aguarda mais tempo para garantir que o serviço tenha tempo de iniciar
          
          # Usando docker exec para rodar o curl dentro do container 'flask'
          docker exec -it flask curl -f http://localhost:80/healthcheck
          
          docker-compose down  # Desliga os containers após os testes

      - name: Set environment variables for DB
        run: echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        env:
          DB_HOST: ${{ secrets.DB_HOST }}

  # Job para o GitHub Packages (Deploy)
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for existing tag
        run: |
          TAG=${GITHUB_REF##*/}
          echo "Checking if tag $TAG already exists"
          if git tag -l | grep -q "$TAG"; then
            echo "Tag $TAG already exists, failing job";
            exit 1;
          fi

      - name: Build Docker image for deployment
        run: |
          docker build -t ghcr.io/phwebcloud/python-app:${GITHUB_SHA} ./APP
          
      - name: Push Docker image to GitHub Packages
        run: |
          docker push ghcr.io/phwebcloud/python-app:${GITHUB_SHA}

  # Job para o Deploy (estratégia de Zero-Downtime)
  canary_deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy using Canary Deployment
        run: |
          # Implementar o deploy para a primeira parte (e.g., 10% dos usuários)
          echo "Deploying to canary environment"
          # Comando para realizar o canary deploy

  # Job de Notificação
  notify_failure:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure to team
        run: |
          echo "Deployment failed. Please check the logs."
          # Comando para notificar, como um Slack, Email ou outro serviço
